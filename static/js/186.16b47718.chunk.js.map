{"version":3,"file":"static/js/186.16b47718.chunk.js","mappings":"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","sources":["components/Loader/Loader.js","components/Reviews/Reviews.jsx","services/posterTemplate.js","services/movieDatabaseAPI.js"],"sourcesContent":["// Utils\nimport { Rings } from 'react-loader-spinner';\n\nexport const Loader = () => {\n  return (\n    <Rings\n      height=\"200\"\n      width=\"200\"\n      color=\"#fb6d3a\"\n      radius=\"6\"\n      wrapperStyle={{\n        position: 'fixed',\n        top: '50%',\n        left: ' 50%',\n        transform: 'translate(-50%, -50%)',\n      }}\n      wrapperClass=\"\"\n      visible={true}\n      ariaLabel=\"rings-loading\"\n    />\n  );\n};\n","// Core\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { toast, Toaster } from 'react-hot-toast';\n\n// API\nimport { getReviewsInfo } from 'services/movieDatabaseAPI';\n\n// Components\nimport { Loader } from 'components/Loader';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const getReviews = async () => {\n      try {\n        setLoading(true);\n        setError('');\n        const results = await getReviewsInfo(movieId);\n        setReviews(results);\n        setLoading(false);\n      } catch {\n        setError('Oops, something went wrong. Please, try again later!');\n      }\n    };\n\n    getReviews();\n  }, [movieId]);\n\n  useEffect(() => {\n    if (!error) return;\n    toast.error(error);\n  }, [error]);\n\n  return (\n    <>\n      {loading && <Loader />}\n\n      {reviews.length > 0 &&\n        reviews.map(({ author, id, content }) => (\n          <div key={id}>\n            <h3 style={{ fontWeight: 'bold', marginBottom: '5px' }}>\n              Author: {author}\n            </h3>\n            <p>{content}</p>\n          </div>\n        ))}\n\n      {reviews.length === 0 && (\n        <h3 style={{ fontWeight: 'bold', marginBottom: '5px' }}>\n          {' '}\n          Sorry, no reviews yet\n        </h3>\n      )}\n\n      <Toaster position=\"top-right\" />\n    </>\n  );\n};\n\nexport default Reviews;\n","export const posterTemplate = poster => {\n  if (!poster) return 'https://www.movienewz.com/img/films/poster-holder.jpg';\n  return `https://image.tmdb.org/t/p/w300/${poster}`;\n};\n","// Utils\nimport axios from 'axios';\nimport { posterTemplate } from './posterTemplate';\n\n// Setups\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst params = {\n  api_key: process.env.REACT_APP_MOVIE_DATABASE,\n  language: 'en-US',\n  include_adult: false,\n};\n\n// HTTP requests\nexport const getTrendingMovies = async () => {\n  const { data } = await axios.get('/trending/movie/day?', { params });\n  return normalizedData(data.results);\n};\n\nexport const getMovieByName = async query => {\n  const { data } = await axios.get('/search/movie?', {\n    params: { query, ...params },\n  });\n  return normalizedData(data.results);\n};\n\nexport const getPrimaryInfo = async movieId => {\n  const { data } = await axios.get(`/movie/${movieId}`, { params });\n  const {\n    id,\n    original_title,\n    poster_path,\n    title,\n    vote_average,\n    overview,\n    genres,\n  } = data;\n\n  return {\n    id,\n    title: title ?? original_title,\n    poster: posterTemplate(poster_path),\n    vote: vote_average ? vote_average.toFixed(1) : 'No score yet',\n    overview: overview ? overview : \"Sorry, we don't have an overview yet\",\n    genres: genres\n      ? genres.map(genre => genre.name).join(', ')\n      : \"Genres weren't added yet\",\n  };\n};\n\nexport const getCastInfo = async id => {\n  const { data } = await axios.get(`/movie/${id}/credits?`, { params });\n  return normalizedCast(data.cast);\n};\n\nexport const getReviewsInfo = async id => {\n  const { data } = await axios.get(`/movie/${id}/reviews?`, { params });\n  return data.results;\n};\n\nconst normalizedData = movies =>\n  movies.map(\n    ({\n      id,\n      original_title,\n      poster_path,\n      title,\n      vote_average,\n      overview,\n      genres,\n    }) => ({\n      id,\n      title: title ?? original_title,\n      poster: posterTemplate(poster_path),\n      vote: vote_average ? vote_average.toFixed(1) : 'No score yet',\n      overview: overview ? overview : \"Sorry, we don't have an overview yet\",\n      genres: genres\n        ? genres.map(genre => genre.name).join(', ')\n        : \"Genres weren't added yet\",\n    })\n  );\n\nconst normalizedCast = cast =>\n  cast.map(({ id, original_name, profile_path, character }) => ({\n    id,\n    name: original_name,\n    poster: posterTemplate(profile_path),\n    character,\n  }));\n"],"names":["Loader","height","width","color","radius","wrapperStyle","position","top","left","transform","wrapperClass","visible","ariaLabel","useState","reviews","setReviews","loading","setLoading","error","setError","movieId","useParams","useEffect","getReviews","getReviewsInfo","results","toast","length","map","author","id","content","style","fontWeight","marginBottom","posterTemplate","poster","axios","params","api_key","process","language","include_adult","getTrendingMovies","data","normalizedData","getMovieByName","query","getPrimaryInfo","original_title","poster_path","title","vote_average","overview","genres","vote","toFixed","genre","name","join","getCastInfo","normalizedCast","cast","movies","original_name","profile_path","character"],"sourceRoot":""}
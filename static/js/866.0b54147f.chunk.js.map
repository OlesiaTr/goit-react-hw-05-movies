{"version":3,"file":"static/js/866.0b54147f.chunk.js","mappings":"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","sources":["components/Loader/Loader.js","components/MoviesList/MoviesList.styled.js","components/MoviesList/MoviesList.jsx","components/SearchBox/SearchBox.styled.js","components/SearchBox/SearchBox.jsx","pages/Movies.jsx","services/posterTemplate.js","services/movieDatabaseAPI.js"],"sourcesContent":["// Utils\nimport { Rings } from 'react-loader-spinner';\n\nexport const Loader = () => {\n  return (\n    <Rings\n      height=\"200\"\n      width=\"200\"\n      color=\"#fb6d3a\"\n      radius=\"6\"\n      wrapperStyle={{\n        position: 'fixed',\n        top: '50%',\n        left: ' 50%',\n        transform: 'translate(-50%, -50%)',\n      }}\n      wrapperClass=\"\"\n      visible={true}\n      ariaLabel=\"rings-loading\"\n    />\n  );\n};\n","// Utils\nimport styled from 'styled-components';\n\nexport const Container = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, 200px);\n  justify-content: center;\n  gap: 20px;\n`;\n\nexport const CardWrapper = styled.li`\n  border-radius: 4px;\n  > a {\n    text-decoration: none;\n  }\n`;\n\nexport const MovieName = styled.h3`\n  padding: 4px;\n  margin-top: 8px;\n  margin-bottom: 0;\n`;\n","// Core\nimport { Link, useLocation } from 'react-router-dom';\n\n// Utils\nimport PropTypes from 'prop-types';\n\n// Styles\nimport { Container, CardWrapper, MovieName } from './MoviesList.styled';\n\nexport const MoviesList = ({ data }) => {\n  const location = useLocation();\n\n  return (\n    <Container>\n      {data.map(({ id, title, poster }) => (\n        <CardWrapper key={id}>\n          <Link to={`/movies/${id}`} state={{ from: location }}>\n            <img src={poster} alt={title} />\n            <MovieName>{title}</MovieName>\n          </Link>\n        </CardWrapper>\n      ))}\n    </Container>\n  );\n};\n\nMoviesList.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.object.isRequired).isRequired,\n};\n","// Utils\nimport styled from 'styled-components';\nimport { HiSearch } from 'react-icons/hi';\n\nexport const Wrapper = styled.div`\n  display: inline-flex;\n  align-items: center;\n  position: relative;\n  margin-bottom: 20px;\n  text-transform: uppercase;\n`;\n\nexport const Input = styled.input`\n  padding: 8px 32px 8px 8px;\n  border-radius: 4px;\n  font: inherit;\n`;\n\nexport const Icon = styled(HiSearch)`\n  width: 20px;\n  height: 20px;\n  position: absolute;\n  right: 6px;\n`;\n","// Styles\nimport { Wrapper, Input, Icon } from './SearchBox.styled';\n\nexport const SearchBox = ({ value, onChange }) => {\n  return (\n    <Wrapper>\n      <Icon />\n      <Input\n        type=\"text\"\n        value={value}\n        onChange={e => onChange(e.target.value)}\n      />\n    </Wrapper>\n  );\n};\n","// Core\nimport { useState, useEffect } from 'react';\n\n// Utils\nimport { useSearchParams } from 'react-router-dom';\nimport { toast, Toaster } from 'react-hot-toast';\n\n// API\nimport { getMovieByName } from 'services/movieDatabaseAPI';\n\n// Components\nimport { SearchBox } from 'components/SearchBox';\nimport { MoviesList } from 'components/MoviesList';\nimport { Loader } from 'components/Loader';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  const [searchParams, setSearchParams] = useSearchParams();\n  const movieName = searchParams.get('name') ?? '';\n\n  useEffect(() => {\n    if (!error) return;\n    toast.error(error);\n  }, [error]);\n\n  useEffect(() => {\n    if (movieName === '') return;\n\n    const getMovies = async () => {\n      try {\n        setLoading(true);\n        setError('');\n        const data = await getMovieByName(movieName);\n        setMovies(data);\n        setLoading(false);\n        if (data.length < 1)\n          setError(\n            'Sorry, we didn`t find any movies according to your request.'\n          );\n      } catch {\n        setError('Sorry, something went wrong. Try reloading the page!');\n      }\n    };\n\n    getMovies();\n  }, [movieName]);\n\n  const updateQueryString = name => {\n    const nextParams = name !== '' ? { name } : {};\n    setSearchParams(nextParams);\n  };\n\n  return (\n    <main>\n      {loading && <Loader />}\n\n      <SearchBox value={movieName} onChange={updateQueryString} />\n      {movies && <MoviesList data={movies} />}\n\n      <Toaster position=\"top-right\" />\n    </main>\n  );\n};\n\nexport default Movies;\n","export const posterTemplate = poster => {\n  if (!poster) return 'https://www.movienewz.com/img/films/poster-holder.jpg';\n  return `https://image.tmdb.org/t/p/w300/${poster}`;\n};\n","// Utils\nimport axios from 'axios';\nimport { posterTemplate } from './posterTemplate';\n\n// Setups\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst params = {\n  api_key: `${process.env.REACT_APP_MOVIE_DATABASE}`,\n  language: 'en-US',\n  include_adult: false,\n};\n\n// HTTP requests\nexport const getTrendingMovies = async () => {\n  const { data } = await axios.get('/trending/movie/day?', { params });\n  return normalisedData(data.results);\n};\n\nexport const getMovieByName = async query => {\n  const { data } = await axios.get('/search/movie?', {\n    params: { query, ...params },\n  });\n  return normalisedData(data.results);\n};\n\nexport const getPrimaryInfo = async movieId => {\n  const { data } = await axios.get(`/movie/${movieId}`, { params });\n  const {\n    id,\n    original_title,\n    poster_path,\n    title,\n    vote_average,\n    overview,\n    genres,\n  } = data;\n\n  return {\n    id,\n    title: title ?? original_title,\n    poster: posterTemplate(poster_path),\n    vote: vote_average ? vote_average.toFixed(1) : 'No score yet',\n    overview: overview ? overview : \"Sorry, we don't have an overview yet\",\n    genres: genres\n      ? genres.map(genre => genre.name).join(', ')\n      : \"Genres weren't added yet\",\n  };\n};\n\nexport const getCastInfo = async id => {\n  const { data } = await axios.get(`/movie/${id}/credits?`, { params });\n  return normalizedCast(data.cast);\n};\n\nexport const getReviewsInfo = async id => {\n  const { data } = await axios.get(`/movie/${id}/reviews?`, { params });\n  return data.results;\n};\n\nconst normalisedData = movies =>\n  movies.map(\n    ({\n      id,\n      original_title,\n      poster_path,\n      title,\n      vote_average,\n      overview,\n      genres,\n    }) => ({\n      id,\n      title: title ?? original_title,\n      poster: posterTemplate(poster_path),\n      vote: vote_average ? vote_average.toFixed(1) : 'No score yet',\n      overview: overview ? overview : \"Sorry, we don't have an overview yet\",\n      genres: genres\n        ? genres.map(genre => genre.name).join(', ')\n        : \"Genres weren't added yet\",\n    })\n  );\n\nconst normalizedCast = cast =>\n  cast.map(({ id, original_name, profile_path, character }) => ({\n    id,\n    name: original_name,\n    poster: posterTemplate(profile_path),\n    character,\n  }));\n"],"names":["Loader","height","width","color","radius","wrapperStyle","position","top","left","transform","wrapperClass","visible","ariaLabel","Container","styled","CardWrapper","MovieName","MoviesList","data","location","useLocation","map","id","title","poster","to","state","from","src","alt","Wrapper","Input","Icon","HiSearch","SearchBox","value","onChange","type","e","target","useState","movies","setMovies","loading","setLoading","error","setError","useSearchParams","searchParams","setSearchParams","movieName","get","useEffect","toast","getMovies","getMovieByName","length","name","posterTemplate","axios","params","api_key","process","language","include_adult","getTrendingMovies","normalisedData","results","query","getPrimaryInfo","movieId","original_title","poster_path","vote_average","overview","genres","vote","toFixed","genre","join","getCastInfo","normalizedCast","cast","getReviewsInfo","original_name","profile_path","character"],"sourceRoot":""}
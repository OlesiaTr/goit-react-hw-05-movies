{"version":3,"file":"static/js/387.8fb7f717.chunk.js","mappings":"uSAGaA,EAAYC,EAAAA,GAAAA,GAAH,uIAOTC,EAASD,EAAAA,GAAAA,IAAH,yC,mBCwDnB,EAjDa,WACX,OAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,IAAnC,eAAOK,EAAP,KAAcC,EAAd,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QAuBR,OArBAE,EAAAA,EAAAA,YAAU,WACHJ,GACLK,EAAAA,GAAAA,MAAYL,EACb,GAAE,CAACA,KAEJI,EAAAA,EAAAA,YAAU,WACR,IAAME,EAAO,mCAAG,sGAEZP,GAAW,GACXE,EAAS,IAHG,UAIWM,EAAAA,EAAAA,IAAYL,GAJvB,gBAIJN,EAJI,EAIJA,KACRC,EAAQD,GACRG,GAAW,GANC,kDAQZE,EAAS,+DARG,0DAAH,qDAYbK,GACD,GAAE,CAACJ,KAGF,gCACGJ,IAAW,SAACU,EAAA,EAAD,KACZ,SAAChB,EAAD,UACGI,EAAKa,KAAI,gBAAGC,EAAH,EAAGA,cAAeC,EAAlB,EAAkBA,GAAIC,EAAtB,EAAsBA,aAAcC,EAApC,EAAoCA,UAApC,OACR,2BACE,SAACnB,EAAD,WACE,gBAAKoB,KAAKC,EAAAA,EAAAA,GAAeH,GAAeI,IAAKN,OAE/C,cAAGO,MAAO,CAAEC,WAAY,OAAQC,aAAc,OAA9C,SACGT,KAEH,uCAAeG,OAPRF,EADD,OAaZ,SAAC,KAAD,CAASS,SAAS,gBAGvB,C,8EC9DYZ,EAAS,WACpB,OACE,SAAC,KAAD,CACEa,OAAO,MACPC,MAAM,MACNC,MAAM,UACNC,OAAO,IACPC,aAAc,CACZL,SAAU,QACVM,IAAK,MACLC,KAAM,OACNC,UAAW,yBAEbC,aAAa,GACbC,SAAS,EACTC,UAAU,iBAGf,C,4MCjBDC,EAAAA,EAAAA,SAAAA,QAAyB,+BAEzB,IAAMC,EAAS,CACbC,QAAQ,GAAD,OAAKC,oCACZC,SAAU,QACVC,eAAe,GAIJC,EAAiB,mCAAG,sGACRN,EAAAA,EAAAA,IAAU,uBAAwB,CAAEC,OAAAA,IAD5B,uBACvBM,EADuB,EACvBA,KADuB,kBAExBA,GAFwB,2CAAH,qDAKjBC,EAAc,mCAAG,WAAMC,GAAN,yFACLT,EAAAA,EAAAA,IAAU,iBAAkB,CACjDC,QAAO,QAAGQ,MAAAA,GAAUR,KAFM,uBACpBM,EADoB,EACpBA,KADoB,kBAIrBA,GAJqB,2CAAH,sDAOdG,EAAc,mCAAG,WAAM/B,GAAN,yFACLqB,EAAAA,EAAAA,IAAA,iBAAoBrB,GAAM,CAAEsB,OAAAA,IADvB,uBACpBM,EADoB,EACpBA,KADoB,kBAErBA,GAFqB,2CAAH,sDAKdhC,EAAW,mCAAG,WAAMI,GAAN,yFACFqB,EAAAA,EAAAA,IAAA,iBAAoBrB,EAApB,aAAmC,CAAEsB,OAAAA,IADnC,uBACjBM,EADiB,EACjBA,KADiB,kBAElBA,GAFkB,2CAAH,sDAKXI,EAAc,mCAAG,WAAMhC,GAAN,yFACLqB,EAAAA,EAAAA,IAAA,iBAAoBrB,EAApB,aAAmC,CAAEsB,OAAAA,IADhC,uBACpBM,EADoB,EACpBA,KADoB,kBAErBA,GAFqB,2CAAH,qD,uDCnCpB,IAAMxB,EAAiB,SAAA6B,GAC5B,OAAKA,EACC,mCAAN,OAA0CA,GADtB,uDAErB,C","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","components/Loader/Loader.js","services/movieDatabaseAPI.js","services/posterTemplate.js"],"sourcesContent":["// Utils\nimport styled from 'styled-components';\n\nexport const Container = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, 200px);\n  justify-content: center;\n  gap: 20px;\n`;\n\nexport const Poster = styled.div`\n  width: 200px;\n`;\n","// Core\nimport { useEffect, useState } from 'react';\n\n// Utils\nimport { useParams } from 'react-router-dom';\nimport { toast, Toaster } from 'react-hot-toast';\n\n// API\nimport { getCastInfo } from 'services/movieDatabaseAPI';\n\n// Components\nimport { Loader } from 'components/Loader';\n\n// Styles\nimport { Container, Poster } from './Cast.styled';\nimport { posterTemplate } from 'services/posterTemplate';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    if (!error) return;\n    toast.error(error);\n  }, [error]);\n\n  useEffect(() => {\n    const getCast = async () => {\n      try {\n        setLoading(true);\n        setError('');\n        const { cast } = await getCastInfo(movieId);\n        setCast(cast);\n        setLoading(false);\n      } catch {\n        setError('Oops, something went wrong. Please, try reloading the page!');\n      }\n    };\n\n    getCast();\n  }, [movieId]);\n\n  return (\n    <>\n      {loading && <Loader />}\n      <Container>\n        {cast.map(({ original_name, id, profile_path, character }) => (\n          <li key={id}>\n            <Poster>\n              <img src={posterTemplate(profile_path)} alt={original_name} />\n            </Poster>\n            <p style={{ fontWeight: 'bold', marginBottom: '5px' }}>\n              {original_name}\n            </p>\n            <p>Character: {character}</p>\n          </li>\n        ))}\n      </Container>\n\n      <Toaster position=\"top-right\" />\n    </>\n  );\n};\nexport default Cast;\n","// Utils\nimport { Rings } from 'react-loader-spinner';\n\nexport const Loader = () => {\n  return (\n    <Rings\n      height=\"200\"\n      width=\"200\"\n      color=\"#fb6d3a\"\n      radius=\"6\"\n      wrapperStyle={{\n        position: 'fixed',\n        top: '50%',\n        left: ' 50%',\n        transform: 'translate(-50%, -50%)',\n      }}\n      wrapperClass=\"\"\n      visible={true}\n      ariaLabel=\"rings-loading\"\n    />\n  );\n};\n","// Utils\nimport axios from 'axios';\n\n// Setups\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst params = {\n  api_key: `${process.env.REACT_APP_MOVIE_DATABASE}`,\n  language: 'en-US',\n  include_adult: false,\n};\n\n// HTTP requests\nexport const getTrendingMovies = async () => {\n  const { data } = await axios.get('/trending/movie/day?', { params });\n  return data;\n};\n\nexport const getMovieByName = async query => {\n  const { data } = await axios.get('/search/movie?', {\n    params: { query, ...params },\n  });\n  return data;\n};\n\nexport const getPrimaryInfo = async id => {\n  const { data } = await axios.get(`/movie/${id}`, { params });\n  return data;\n};\n\nexport const getCastInfo = async id => {\n  const { data } = await axios.get(`/movie/${id}/credits?`, { params });\n  return data;\n};\n\nexport const getReviewsInfo = async id => {\n  const { data } = await axios.get(`/movie/${id}/reviews?`, { params });\n  return data;\n};\n","export const posterTemplate = poster => {\n  if (!poster) return 'https://www.movienewz.com/img/films/poster-holder.jpg';\n  return `https://image.tmdb.org/t/p/w300/${poster}`;\n};\n"],"names":["Container","styled","Poster","useState","cast","setCast","loading","setLoading","error","setError","movieId","useParams","useEffect","toast","getCast","getCastInfo","Loader","map","original_name","id","profile_path","character","src","posterTemplate","alt","style","fontWeight","marginBottom","position","height","width","color","radius","wrapperStyle","top","left","transform","wrapperClass","visible","ariaLabel","axios","params","api_key","process","language","include_adult","getTrendingMovies","data","getMovieByName","query","getPrimaryInfo","getReviewsInfo","poster"],"sourceRoot":""}